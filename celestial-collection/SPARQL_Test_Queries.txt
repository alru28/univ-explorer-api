SPARQL Queries

-----------------------------
PLANETAS SISTEMA SOLAR COMPLETA
-----------------------------


SELECT ?planet ?planetLabel 
       (SAMPLE(?distanceFromEarth) AS ?distanceFromEarth) 
       (SAMPLE(IF(BOUND(?temperature), ?temperature, "-110")) AS ?temperature) # Handle case of Jupiter not having temperature
       (SAMPLE(?radius) AS ?radius) 
       (SAMPLE(?diameter) AS ?diameter) 
       (SAMPLE(?gravity) AS ?gravity) 
       (SAMPLE(COALESCE(?demonymEng, ?demonymOther)) AS ?demonym)  # Prioritize English demonym
       (SAMPLE(?mass) AS ?mass)  # Mass of the planet
WHERE {
  {
    ?planet wdt:P31 wd:Q3504248 .  # Inner planet of the Solar System
  }
  UNION
  {
    ?planet wdt:P31 wd:Q30014 .  # Outer planet
  }
  OPTIONAL { ?planet wdt:P2583 ?distanceFromEarth . }  # Distance from Earth
  OPTIONAL { ?planet wdt:P2076 ?temperature . }  # Temperature
  OPTIONAL { ?planet wdt:P2120 ?radius . }  # Radius
  OPTIONAL { ?planet wdt:P2386 ?diameter . }  # Diameter
  OPTIONAL { ?planet wdt:P7015 ?gravity . }  # Surface gravity
  OPTIONAL { ?planet wdt:P2067 ?mass . }  # Mass
  OPTIONAL { ?planet wdt:P1549 ?demonymEng . FILTER (lang(?demonymEng) = "en") }  # Demonym (only in English)
  OPTIONAL { ?planet wdt:P1549 ?demonymOther . }  # Demonym (any other language)
  
  FILTER (?planet != wd:Q3542479)  # Exclude Tuxing (Mars alternative)
  
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". }
}
GROUP BY ?planet ?planetLabel



Tierra, Marte, Venus, Jupiter - CELSIUS

Saturno, Mercurio, Urano, Neptuno - KELVIN



-----------------------------
PLANETAS SISTEMA SOLAR NOMBRES
-----------------------------


-----------------------------
PLANETA CONCRETO
-----------------------------


SELECT ?planet ?planetLabel 
        (SAMPLE(?distanceFromEarth) AS ?distanceFromEarth)
        (SAMPLE(IF(BOUND(?temperature), ?temperature, "-110")) AS ?temperature)
        (SAMPLE(?radius) AS ?radius)
        (SAMPLE(?diameter) AS ?diameter)
        (SAMPLE(?gravity) AS ?gravity)
        (SAMPLE(?mass) AS ?mass)
        (SAMPLE(COALESCE(?demonymEng, ?demonymOther)) AS ?demonym)
    WHERE {
        {
            ?planet wdt:P31 wd:Q3504248 .
        }
        UNION
        {
            ?planet wdt:P31 wd:Q30014 .
        }
        ?planet rdfs:label "Saturn"@en .
        
        OPTIONAL { ?planet wdt:P2583 ?distanceFromEarth . }  # Distance from Earth
        OPTIONAL { ?planet wdt:P2076 ?temperature . }  # Temperature
        OPTIONAL { ?planet wdt:P2120 ?radius . }  # Radius
        OPTIONAL { ?planet wdt:P2386 ?diameter . }  # Diameter
        OPTIONAL { ?planet wdt:P7015 ?gravity . }  # Gravity
        OPTIONAL { ?planet wdt:P2067 ?mass . }  # Mass
        OPTIONAL { ?planet wdt:P1549 ?demonymEng . FILTER (lang(?demonymEng) = "en") }  # Demonym (in English)
        OPTIONAL { ?planet wdt:P1549 ?demonymOther . }  # Demonym (any other language)
        
        SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
    }
    GROUP BY ?planet ?planetLabel



-----------------------------
LUNAS
-----------------------------

SELECT ?moon ?moonLabel (SAMPLE(COALESCE(?discovererLabel, "Humanity")) AS ?discovererLabel)
WHERE {
    ?planet rdfs:label "Neptune"@en .
    
    ?moon wdt:P397 ?planet .
    ?planet wdt:P398 ?moon .
    
    # Optional discoverer
    OPTIONAL {
      ?moon wdt:P61 ?discoverer .
      ?discoverer wdt:P31 wd:Q5 . # Discoverer is human
      ?discoverer rdfs:label ?discovererLabel .
      FILTER(LANG(?discovererLabel) = "en")
    }

    # Instances of various types of moons
    {
      ?moon wdt:P31 wd:Q1086783 .  # Regular moon
    } UNION {
      ?moon wdt:P31 wd:Q177268 .   # Moon of Mars
    } UNION {
      ?moon wdt:P31 wd:Q61702557 . # Moon of Jupiter
    } UNION {
      ?moon wdt:P31 wd:Q1972 .     # Moon of Saturn
    } UNION {
      ?moon wdt:P31 wd:Q2152 .     # Moon of Uranus
    } UNION {
      ?moon wdt:P31 wd:Q2139 .     # Moon of Neptune
    }

    SERVICE wikibase:label { bd:serviceParam wikibase:language "en". }
}
GROUP BY ?moon ?moonLabel
ORDER BY RAND()  # Randomize the results
LIMIT 10